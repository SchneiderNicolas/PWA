/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, StaleWhileRevalidate } from 'workbox-strategies';
import { openDB } from 'idb';
import config from './config/config';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html'),
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  }),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

self.addEventListener('push', function (event) {
  if (!event.data) {
    console.error('Push event but no data');
    return;
  }

  const data = event.data.json();

  if (!data.title || !data.body) {
    console.error('Push event but no title or body data');
    return;
  }

  const options = {
    body: data.body,
    icon: data.icon || 'images/example.png',
    badge: 'images/badge.png',
    data: data.data || {},
  };

  event.waitUntil(
    self.clients.matchAll({ type: 'window' }).then((windowClients) => {
      console.log(windowClients);

      let shouldShowNotification = true;

      for (let i = 0; i < windowClients.length; i++) {
        const client = windowClients[i];
        const clientBaseUrl = new URL(client.url).origin;

        if (
          clientBaseUrl === new URL(config.BASE_URL).origin &&
          client.visibilityState === 'visible'
        ) {
          shouldShowNotification = false;

          windowClients.forEach((client) => {
            if (client.focused) {
              client.postMessage({
                type: 'SHOW_NOTIFICATION',
                payload: {
                  notificationOptions: options,
                  notificationTitle: data.title,
                },
              });
            }
          });

          break;
        }
      }

      if (shouldShowNotification) {
        return self.registration.showNotification(data.title, options);
      }
    }),
  );
});

self.addEventListener('notificationclick', function (event) {
  event.notification.close();

  const urlToNavigate = event.notification.data.url;

  event.waitUntil(
    self.clients.matchAll({ type: 'window' }).then((windowClients) => {
      for (let i = 0; i < windowClients.length; i++) {
        const client = windowClients[i];
        const clientBaseUrl = new URL(client.url).origin;
        const notificationBaseUrl = new URL(urlToNavigate).origin;

        if (
          client.url === urlToNavigate &&
          client.visibilityState === 'visible'
        ) {
          return client.focus();
        } else if (clientBaseUrl === notificationBaseUrl) {
          return client.navigate(urlToNavigate).then((navigatedClient) => {
            if (navigatedClient) {
              return navigatedClient.focus();
            }
          });
        }
      }

      if (self.clients.openWindow) {
        return self.clients.openWindow(urlToNavigate);
      }
    }),
  );
});

self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

self.addEventListener('install', function (event) {
  self.skipWaiting();
});

registerRoute(
  new RegExp(`${config.API_BASE_URL}/discussions`),
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 24 * 60 * 60, // 1 day
      }),
    ],
  }),
);

registerRoute(
  new RegExp(`${config.API_BASE_URL}/discussion/\\d+`),
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 24 * 60 * 60, // 1 day
      }),
    ],
  }),
);

self.addEventListener('fetch', (event: FetchEvent) => {
  if (
    event.request.method === 'POST' &&
    event.request.url.includes('/messages/send')
  ) {
    event.respondWith(
      fetch(event.request.clone()).catch((error) => {
        return storeMessage(event.request).then(() => {
          // Register a sync event to resend the message when back online
          self.registration.sync.register('retryMessages');
          return new Response(JSON.stringify({ message: 'Stored for retry' }), {
            status: 202,
          });
        });
      }),
    );
  }
});

async function storeMessage(request: Request) {
  const db = await openDB('myDB', 1, {
    upgrade(db) {
      db.createObjectStore('outbox', { autoIncrement: true, keyPath: 'id' });
    },
  });

  // Define headers with an index signature
  const headers: { [key: string]: string } = {};
  request.headers.forEach((value, name) => {
    headers[name] = value;
  });

  const body = await request.clone().json();

  await db.add('outbox', { headers, body });
}

interface SyncManager {
  getTags(): Promise<string[]>;
  register(tag: string): Promise<void>;
}

declare global {
  interface ServiceWorkerRegistration {
    readonly sync: SyncManager;
  }

  interface SyncEvent extends ExtendableEvent {
    readonly lastChance: boolean;
    readonly tag: string;
  }

  interface ServiceWorkerGlobalScopeEventMap {
    sync: SyncEvent;
  }
}

self.addEventListener('sync', (event: SyncEvent) => {
  if (event.tag === 'retryMessages') {
    event.waitUntil(retryMessages());
  }
});

async function retryMessages() {
  const db = await openDB('myDB', 1);
  const messages = await db.getAll('outbox');

  for (const message of messages) {
    try {
      // Using stored headers and body
      const response = await fetch(`${config.API_BASE_URL}/messages/send`, {
        method: 'POST',
        headers: message.headers,
        body: JSON.stringify(message.body),
      });

      if (response.ok) {
        await db.delete('outbox', message.id);
      } else {
        console.error('Failed to send message:', message.id, response.status);
      }
    } catch (error) {
      console.error('Failed to send message:', message.id, error);
    }
  }
}
